-- The Code used in this product is distributed WITHOUT ANY WARRANTY.
-- The signals generated from this code are for INDICATION purposes only.
-- TRADING DISCRETION IS ADVISED.
-- ===============================================
-- You can email your feature requests and bugs to:
-- https://github.com/Muhammad-1990/iqoption
-- mo.ahmod90@gmail.com
-- ===============================================

instrument {
    name = 'Mo v1',
    short_name = 'Mo_v1',
    icon = '',
    overlay = true
}

input_group {
"BUY",
buy_color = input {default = "lime", type = input.color}
}

input_group {
"SELL",
sell_color = input { default = "orangered", type = input.color },
}

input_group {
    "Stockhastic",
    k_period = input (13, "Stockhastic period K", input.integer, 1),
    d_period = input (3, "Stockhastic period D", input.integer, 1),
    smooth = input (3, "Stockhastic smoothing", input.integer, 1),
    overboughtZone = input (80, "Stockhastic overbought", input.integer, 1),
    oversoldZone = input (20, "Stockhastic oversold", input.integer, 1),
}

input_group {
    "RSI",
    rsi_period = input (7, "RSI period", input.integer, 1),
    buyRegion = input (50, "RSI buy region", input.integer, 1),
    sellRegion = input (50, "RSI sell region", input.integer, 1),
}

input_group {
    "MACD",
    fast = input (12, "MACD fast period", input.integer, 1, 250),
    slow = input (26, "MACD slow period", input.integer, 1, 250),
    signal_period = input (9, "MACD signal period", input.integer, 1, 250),
}

input_group {
    "ADX",
    adx_period = input (14, "ADX period", input.integer, 1),
    threshold  = input (22, "ADX threshold", input.integer, 1)
}
-- ===============  Relative Volitility =================
input_group {
    "front.ind.dpo.generalline",
    stdev_period = input (10, "front.newind.stddev", input.double, 1),
    avg_period = input (14, "front.newind.smoothingperiod", input.double, 1),
    source = input (1, "front.ind.source", input.string_selection, inputs.titles),
    fn     = input (averages.ema, "front.newind.smoothingfunction", input.string_selection, averages.titles),
}

input_group {
    "front.newind.supportlines",
    overbought = input (60, "front.overbought", input.double, 1, 100, 1, false),
    oversold = input (40, "front.oversold", input.double, 1, 100, 1, false),
}
-- =============== Wave Volume =================
local method        = input(1, "Renko Assignment Method", input.string_selection, { "ATR", "Traditional", "Part of Price" })
local methodvalue   = input(2, "Value", input.double, 0)
local pricesource   = input(1, "Price Source", input.string_selection, { "Close", "Open / Close", "High / Low" })

local useTrueRange  = input(2, "Use True Range instead of Volume", input.string_selection, { "Always", "Auto", "Never" })
local isOscillating = input(false, "Oscillating", input.boolean)
local normalize     = input(false, "Normalize", input.boolean)


-- ================================================================================================================================
-- ================================================================================================================================


-- ==============  STK ======================
k = sma (stochastic (close, k_period), smooth) * 100
d = sma (k, d_period)

-- if we are in overbought zone then adjust accordingly. and d > overboughtZone
if k > overboughtZone then
    stkIsTop = true
    stkIsSELL = false
    stkIsBottom = false
    stkIsBUY = false
end

-- if we are in oversold zone then adjust accordingly.and d < oversoldZone 
if k < oversoldZone then
    stkIsBottom = true
    stkIsBUY = false
    stkIsTop = false
    stkIsSELL = false
end

-- if we are in overbought zone
if stkIsTop == true then
    -- if we cross down and leave overbought zone
    if k < overboughtZone and d < overboughtZone and k < d then
        -- we are ready to look for a sell opportunity.
        stkIsSELL = true
        stkIsBUY = false
    end
end

-- if are in oversold zone
if stkIsBottom == true then
    -- if we cross up and leave oversold zone
    if k > oversoldZone and d > oversoldZone and k > d then
        -- we are ready to look for a buy opportunity.
        stkIsBUY = true
        stkIsSELL = false
    end
end

if stkIsSELL == true and k > d then
        -- if we are looking for a sell and we have an opposite cross then the signal is canceled.
        -- we can continue looking for a sell since momentum is downwards.
        stkIsSELL = false
        stkIsTop = false
end

if stkIsBUY == true then
    if k < d then
        -- if we are looking for a buy and we have an opposite cross then the signal is canceled.
        -- we can continue looking for a buy since momentum is upwards.
        stkIsBUY = false
        stkIsBottom = false
    end
end
---------------------------------------------------------------------

-- ================= RSI ======================
myrsi = rsi(close, rsi_period)

-- If RSI is in the sell Region, the trend is down and we are only interested in sell opportunities.
if myrsi < sellRegion then
     rsiIsSELL = true
     rsiIsBUY = false
end
-- If RSI is in the buy Region, the trend is up and we are only interested in buy opportunities.
if myrsi > buyRegion then
     rsiIsSELL = false
     rsiIsBUY = true
end
---------------------------------------------------------------------


-- ===============  MACD =================
fastMA = ema(close, fast)
slowMA = ema(close, slow)

macd = fastMA - slowMA
signal = ema(macd, signal_period)
histo = macd - signal

-- If we have a cross up then we are ready to buy.
if  (histo[1] < 0) and (histo > 0) then
    if macd < 0 then
        macdIsBUY = true
        macdSELL = false
    end

-- If we have a cross down then we are ready to sell.
elseif  (histo[1] > 0)  and (histo < 0) then
    if macd > 0 then
        macdIsBUY = false
        macdIsSELL = true
    end 
else
  macdIsBUY = false
  macdIsSELL = false
end
---------------------------------------------------------------------

-- ===============  ADX =================
-- up_move = change (high)
-- down_move = -change (low)

-- pdm = iff (up_move > down_move and nz(up_move) > 0, up_move, 0)
-- mdm = iff (down_move > up_move and nz(down_move) > 0, down_move, 0)

-- atr = rma(tr, adx_period)

-- pdi = 100 * rma (pdm / atr, adx_period)
-- mdi = 100 * rma (mdm / atr, adx_period)

-- adx = 100 * rma (abs (pdi - mdi) / (pdi + mdi), adx_period)

-- if pdi > mdi then
--     adxIsSELL = false
--     if pdi > threshold then
--         adxIsBUY = true
--     end
-- end

-- if mdi > pdi then
--     adxIsBUY = false
--     if mdi > threshold then
--         adxIsSELL = true
--     end
-- end
---------------------------------------------------------------------

-- ===============  Relative Volitility =================
local sourceSeries = inputs [source]
local averageFunction = averages [fn]

dev = stdev (sourceSeries, stdev_period)

up = iff (nz (get_value (change (sourceSeries))) >= 0, dev, 0)
down = iff (nz (get_value (change (sourceSeries))) < 0, dev, 0)

up_sum = averageFunction (up, avg_period)
down_sum = averageFunction (down, avg_period)

res = 100 * up_sum / (up_sum + down_sum)

if nz(res, 50) > overbought then
    rvIsBUY = true
    rvIsSELL = false
end

if nz(res, 50) < oversold then
    rvIsBUY = false
    rvIsSELL = true
end
---------------------------------------------------------------------

-- =============== Wave Volume =================

-- local useClose = pricesource == 1
-- local useOpenClose = pricesource == 2 or useClose

-- local inp_vol = iff (useTrueRange == 1 or (useTrueRange == 2 and na(volume)), tr, volume)
-- local op = iff (useClose, close, open)
-- local hi = iff (useOpenClose, iff (close >= op, close, op), high)
-- local lo = iff (useOpenClose, iff (close <= op, close, op), low)

-- if method == 1 then
--     methodvalue = rma(tr, round(methodvalue))
-- elseif method == 3 then
--     methodvalue = close / methodvalue
-- end

-- prevclose = nz(currclose[1])
-- prevhigh = prevclose + methodvalue
-- prevlow = prevclose - methodvalue
-- currclose = iff (hi > prevhigh, hi, iff (lo < prevlow, lo, prevclose))

-- direction = iff (currclose > prevclose, 1, iff (currclose < prevclose, -1, nz(direction[1])))

-- local directionHasChanged = direction ~= direction [1]

-- local directionIsUp = direction > 0
-- local directionIsDown = direction < 0

-- if directionIsUp then
--     volIsBUY = true
--     volIsSELL = false
-- end
-- if directionIsDown then
--     volIsBUY = false
--     volIsSELL = true
-- end

---------------------------------------------------------------------



-- If all sell conditions are met then we have a clear signal that a sell opportunity may present itself.
-- We represent this by drawing a sell indicator above the signal candle.
if stkIsSELL == true and macdIsSELL == true then --and rsiIsSELL == true then -- and adxIsSELL == true and rvIsSELL == true and volIsSELL == true then
    plot_shape(
                true ,
                "Sell",
                shape_style.arrowdown,
                shape_size.normal,
                sell_color,
                shape_location.abovebar,
                0,
                "Sell",
                sell_color
            )
    -- reset the signal service
    stkIsTop = false
    stkIsSELL = false
    stkIsBottom = false
    stkIsBUY = false
    rsiIsSELL = false
    rsiIsBUY = false
    macdIsSELL = false
    macdIsBUY = false
    adxIsSELL = false
    adxIsBUY = false
    rvIsSELL = false
    rvIsBUY = false
    volIsSELL = false
    volIsBUY = false
end

-- If all buy conditions are met then we have a clear signal that a buy opportunity may present itself.
-- We represent this by drawing a buy indicator above the signal candle.
if stkIsBUY == true and macdIsBUY == true then --and rsiIsBUY == true then -- and adxIsBUY == true and rvIsBUY == true and volIsBUY == true then
    plot_shape(
                true ,
                "Buy",
                shape_style.arrowup,
                shape_size.normal,
                buy_color,
                shape_location.belowbar,
                0,
                "Buy",
                buy_color
            )
    -- reset the signal service
    stkIsTop = false
    stkIsSELL = false
    stkIsBottom = false
    stkIsBUY = false
    rsiIsSELL = false
    rsiIsBUY = false
    macdIsSELL = false
    macdIsBUY = false
    adxIsSELL = false
    adxIsBUY = false
    rvIsSELL = false
    rvIsBUY = false
    volIsSELL = false
    volIsBUY = false
end
